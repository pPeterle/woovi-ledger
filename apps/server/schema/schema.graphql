type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  account: Account
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Represents an account with balance"""
type Account implements Node {
  """The ID of an object"""
  id: ID!
  accountName: String
  balance: String
  deletedAt: String

  """mongoose _id"""
  _id: String!
  createdAt: String
  updatedAt: String
}

type Mutation {
  CreateAccountMutation(input: AddAccountInput!): AddAccountPayload
  AddDepositMutation(input: AddDepositInput!): AddDepositPayload
}

type AddAccountPayload {
  account: Account
  clientMutationId: String
}

input AddAccountInput {
  """Name of the account"""
  name: String!
  clientMutationId: String
}

type AddDepositPayload {
  transaction: Transaction

  """Default success field resolver."""
  success: String

  """Default error field resolver."""
  error: String
  clientMutationId: String
}

"""Represents an Transaction with balance"""
type Transaction implements Node {
  """The ID of an object"""
  id: ID!
  source: String

  """mongoose _id"""
  _id: String!
  createdAt: String
  updatedAt: String
}

input AddDepositInput {
  """PIX or BANK"""
  source: String!

  """Amount in cents"""
  amount: Int!

  """Account ID"""
  fromAccount: String!
  clientMutationId: String
}